package proverbs

import (
	"time"
)

// GetCommunityProverbs returns additional proverbs contributed by the Go community
func GetCommunityProverbs() map[string]Proverb {
	return map[string]Proverb{
		"community-001": {
			Title:       "Context is king in concurrent programs",
			Text:        "Context is king in concurrent programs.",
			Author:      "Go Community",
			Category:    CategoryConcurrency,
			Example:     GetExampleForProverb("community-001"),
			Explanation: "Context should be the first parameter in functions that can be cancelled or have timeouts. It enables proper cancellation propagation and request scoping.",
			Tags:        []string{"context", "cancellation", "timeouts"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-002": {
			Title:    "Use table-driven tests for comprehensive coverage",
			Text:     "Use table-driven tests for comprehensive coverage.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-002"),
			Explanation: "Table-driven tests allow you to test multiple scenarios with the same test logic, making tests more maintainable and comprehensive.",
			Tags:        []string{"testing", "table-driven", "coverage"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-003": {
			Title:    "Validate input at boundaries",
			Text:     "Validate input at boundaries.",
			Author:   "Go Community",
			Category: CategoryErrors,
			Example: GetExampleForProverb("community-003"),
			Explanation: "Input validation should happen at system boundaries (API endpoints, function entry points) to catch errors early and provide clear feedback.",
			Tags:        []string{"validation", "boundaries", "input"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-004": {
			Title:    "Use functional options for complex constructors",
			Text:     "Use functional options for complex constructors.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-004"),
			Explanation: "Functional options provide a clean, extensible way to configure complex objects while maintaining backward compatibility.",
			Tags:        []string{"options", "constructor", "configuration"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-005": {
			Title:    "Embed for composition, not inheritance",
			Text:     "Embed for composition, not inheritance.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-005"),
			Explanation: "Go's embedding promotes composition over inheritance, leading to more flexible and maintainable code structures.",
			Tags:        []string{"embedding", "composition", "design"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-006": {
			Title:    "Use channels for coordination, mutexes for state",
			Text:     "Use channels for coordination, mutexes for state.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-006"),
			Explanation: "Channels excel at coordinating goroutines and passing data, while mutexes are better for protecting shared state.",
			Tags:        []string{"channels", "mutexes", "coordination"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-007": {
			Title:    "Prefer specific error types over error strings",
			Text:     "Prefer specific error types over error strings.",
			Author:   "Go Community",
			Category: CategoryErrors,
			Example: GetExampleForProverb("community-007"),
			Explanation: "Custom error types enable better error handling, type checking, and provide more context than simple string errors.",
			Tags:        []string{"errors", "types", "handling"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-008": {
			Title:    "Use build tags for conditional compilation",
			Text:     "Use build tags for conditional compilation.",
			Author:   "Go Community",
			Category: CategoryPackaging,
			Example: GetExampleForProverb("community-008"),
			Explanation: "Build tags allow you to include or exclude code based on build conditions, useful for platform-specific code or feature flags.",
			Tags:        []string{"build-tags", "conditional", "compilation"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-009": {
			Title:    "Use sync.Once for expensive initialization",
			Text:     "Use sync.Once for expensive initialization.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-009"),
			Explanation: "sync.Once ensures expensive initialization happens exactly once, even in concurrent environments.",
			Tags:        []string{"sync.Once", "initialization", "performance"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-010": {
			Title:    "Use type switches for interface handling",
			Text:     "Use type switches for interface handling.",
			Author:   "Go Community",
			Category: CategoryInterfaces,
			Example: GetExampleForProverb("community-010"),
			Explanation: "Type switches provide a clean way to handle different concrete types that implement the same interface.",
			Tags:        []string{"type-switch", "interfaces", "handling"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-011": {
			Title:    "Make the zero value useful",
			Text:     "Make the zero value useful.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-011"),
			Explanation: "Design your types so that their zero value is useful and ready to use without explicit initialization.",
			Tags:        []string{"zero-value", "design", "initialization"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-012": {
			Title:    "Accept interfaces, return structs",
			Text:     "Accept interfaces, return structs.",
			Author:   "Go Community",
			Category: CategoryInterfaces,
			Example: GetExampleForProverb("community-012"),
			Explanation: "Functions should accept interfaces for flexibility and return concrete types for clarity and performance.",
			Tags:        []string{"interfaces", "structs", "design"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-013": {
			Title:    "Use string constants for magic values",
			Text:     "Use string constants for magic values.",
			Author:   "Go Community",
			Category: CategoryIdioms,
			Example: GetExampleForProverb("community-013"),
			Explanation: "Replace magic strings and numbers with named constants to improve code readability and maintainability.",
			Tags:        []string{"constants", "magic-values", "readability"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-014": {
			Title:    "Defer is for cleanup, not control flow",
			Text:     "Defer is for cleanup, not control flow.",
			Author:   "Go Community",
			Category: CategoryIdioms,
			Example: GetExampleForProverb("community-014"),
			Explanation: "Use defer for cleanup operations like closing files or releasing resources, not for complex control flow logic.",
			Tags:        []string{"defer", "cleanup", "control-flow"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-015": {
			Title:    "Use buffered channels for async processing",
			Text:     "Use buffered channels for async processing.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-015"),
			Explanation: "Buffered channels can improve performance by allowing producers and consumers to work at different rates.",
			Tags:        []string{"buffered-channels", "async", "performance"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-016": {
			Title:    "Preallocate slices when size is known",
			Text:     "Preallocate slices when size is known.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-016"),
			Explanation: "Preallocating slices with known capacity avoids multiple memory allocations and improves performance.",
			Tags:        []string{"slices", "preallocation", "performance"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-017": {
			Title:    "Use worker pools for bounded concurrency",
			Text:     "Use worker pools for bounded concurrency.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-017"),
			Explanation: "Worker pools limit the number of concurrent operations, preventing resource exhaustion and improving system stability.",
			Tags:        []string{"worker-pools", "concurrency", "bounded"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-018": {
			Title:    "Use sync.Pool for expensive object reuse",
			Text:     "Use sync.Pool for expensive object reuse.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-018"),
			Explanation: "sync.Pool allows reusing expensive objects across goroutines, reducing garbage collection pressure.",
			Tags:        []string{"sync.Pool", "object-reuse", "performance"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-019": {
			Title:    "Cache with TTL and size limits",
			Text:     "Cache with TTL and size limits.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-019"),
			Explanation: "Production caches should have TTL for data freshness and size limits to prevent memory exhaustion.",
			Tags:        []string{"cache", "TTL", "size-limits"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-020": {
			Title:    "Use structured logging for production",
			Text:     "Use structured logging for production.",
			Author:   "Go Community",
			Category: CategoryIdioms,
			Example: GetExampleForProverb("community-020"),
			Explanation: "Structured logging with key-value pairs makes logs searchable and easier to analyze in production systems.",
			Tags:        []string{"logging", "structured", "production"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-021": {
			Title:    "Implement health checks for services",
			Text:     "Implement health checks for services.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-021"),
			Explanation: "Health checks enable monitoring systems to detect service issues and take appropriate action.",
			Tags:        []string{"health-checks", "monitoring", "services"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-022": {
			Title:    "Observability through metrics, tracing, and structured logging",
			Text:     "Observability through metrics, tracing, and structured logging.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-022"),
			Explanation: "Comprehensive observability requires metrics for quantitative data, tracing for request flow, and structured logging for detailed context.",
			Tags:        []string{"observability", "metrics", "tracing", "logging"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-023": {
			Title:    "Graceful shutdown for long-running services",
			Text:     "Graceful shutdown for long-running services.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-023"),
			Explanation: "Graceful shutdown ensures that services can complete ongoing work and clean up resources before terminating.",
			Tags:        []string{"graceful-shutdown", "services", "cleanup"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-024": {
			Title:    "Use select for non-blocking channel operations",
			Text:     "Use select for non-blocking channel operations.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-024"),
			Explanation: "Select statements enable non-blocking channel operations and timeouts, preventing goroutines from hanging indefinitely.",
			Tags:        []string{"select", "non-blocking", "timeouts"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-025": {
			Title:    "Fan-out, fan-in for parallel processing",
			Text:     "Fan-out, fan-in for parallel processing.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-025"),
			Explanation: "Fan-out distributes work across multiple goroutines, fan-in collects results, maximizing parallelism and throughput.",
			Tags:        []string{"fan-out", "fan-in", "parallel"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-026": {
			Title:    "Use context for request-scoped values",
			Text:     "Use context for request-scoped values.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-026"),
			Explanation: "Context carries request-scoped values like user IDs, trace IDs, and authentication tokens across API boundaries.",
			Tags:        []string{"context", "request-scoped", "values"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-027": {
			Title:    "Pipeline pattern for data transformation",
			Text:     "Pipeline pattern for data transformation.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-027"),
			Explanation: "Pipelines chain processing stages with channels, enabling concurrent data transformation with clear separation of concerns.",
			Tags:        []string{"pipeline", "transformation", "stages"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-028": {
			Title:    "Use sync.WaitGroup for goroutine coordination",
			Text:     "Use sync.WaitGroup for goroutine coordination.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-028"),
			Explanation: "WaitGroup synchronizes completion of multiple goroutines, ensuring all work finishes before proceeding.",
			Tags:        []string{"sync.WaitGroup", "coordination", "synchronization"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-029": {
			Title:    "Rate limiting with time.Ticker",
			Text:     "Rate limiting with time.Ticker.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-029"),
			Explanation: "Ticker-based rate limiting controls the frequency of operations, preventing system overload and ensuring fair resource usage.",
			Tags:        []string{"rate-limiting", "ticker", "throttling"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-030": {
			Title:    "Circuit breaker pattern for resilience",
			Text:     "Circuit breaker pattern for resilience.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-030"),
			Explanation: "Circuit breakers prevent cascading failures by temporarily blocking calls to failing services, allowing them time to recover.",
			Tags:        []string{"circuit-breaker", "resilience", "failure-handling"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-031": {
			Title:    "Use atomic operations for simple counters",
			Text:     "Use atomic operations for simple counters.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-031"),
			Explanation: "Atomic operations provide lock-free synchronization for simple operations, offering better performance than mutexes for basic counters.",
			Tags:        []string{"atomic", "lock-free", "counters"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-032": {
			Title:    "Semaphore pattern for resource limiting",
			Text:     "Semaphore pattern for resource limiting.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-032"),
			Explanation: "Semaphores limit the number of concurrent operations accessing a shared resource, preventing resource exhaustion.",
			Tags:        []string{"semaphore", "resource-limiting", "concurrency-control"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-033": {
			Title:    "Use errgroup for error handling in goroutines",
			Text:     "Use errgroup for error handling in goroutines.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-033"),
			Explanation: "errgroup simplifies error handling and cancellation in concurrent operations, automatically canceling remaining work on first error.",
			Tags:        []string{"errgroup", "error-handling", "cancellation"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-034": {
			Title:    "Timeout pattern with context",
			Text:     "Timeout pattern with context.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-034"),
			Explanation: "Timeout patterns prevent operations from running indefinitely, ensuring system responsiveness and resource cleanup.",
			Tags:        []string{"timeout", "context", "responsiveness"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-035": {
			Title:    "Use sync.Map for concurrent map access",
			Text:     "Use sync.Map for concurrent map access.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-035"),
			Explanation: "sync.Map provides concurrent-safe map operations optimized for read-heavy workloads with occasional writes.",
			Tags:        []string{"sync.Map", "concurrent-map", "thread-safe"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-036": {
			Title:    "Publish-subscribe pattern with channels",
			Text:     "Publish-subscribe pattern with channels.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-036"),
			Explanation: "Pub-sub patterns decouple message producers from consumers, enabling flexible event-driven architectures.",
			Tags:        []string{"pub-sub", "event-driven", "decoupling"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-037": {
			Title:    "Use sync.Cond for complex synchronization",
			Text:     "Use sync.Cond for complex synchronization.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-037"),
			Explanation: "sync.Cond enables complex synchronization scenarios where goroutines wait for specific conditions to become true.",
			Tags:        []string{"sync.Cond", "condition-variables", "synchronization"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-038": {
			Title:    "Memory pooling for high-frequency allocations",
			Text:     "Memory pooling for high-frequency allocations.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-038"),
			Explanation: "Memory pools reduce GC pressure by reusing objects, crucial for high-throughput applications with frequent allocations.",
			Tags:        []string{"memory-pooling", "gc-optimization", "performance"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-039": {
			Title:    "Use string builder for efficient concatenation",
			Text:     "Use string builder for efficient concatenation.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-039"),
			Explanation: "strings.Builder provides efficient string concatenation by minimizing memory allocations and copies.",
			Tags:        []string{"string-builder", "concatenation", "performance"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-040": {
			Title:    "Avoid memory leaks with slice reslicing",
			Text:     "Avoid memory leaks with slice reslicing.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-040"),
			Explanation: "Reslicing can cause memory leaks by retaining references to large underlying arrays. Copy when the slice is much smaller.",
			Tags:        []string{"memory-leaks", "slice-reslicing", "gc"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-041": {
			Title:    "Use unsafe for performance-critical code",
			Text:     "Use unsafe for performance-critical code.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-041"),
			Explanation: "unsafe package enables zero-copy operations and memory layout control, but use sparingly and with extreme caution.",
			Tags:        []string{"unsafe", "zero-copy", "performance-critical"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-042": {
			Title:    "Optimize hot paths with profiling",
			Text:     "Optimize hot paths with profiling.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-042"),
			Explanation: "Profile before optimizing. pprof identifies actual bottlenecks rather than assumed ones, guiding effective optimization efforts.",
			Tags:        []string{"profiling", "pprof", "optimization"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-043": {
			Title:    "Use build constraints for feature flags",
			Text:     "Use build constraints for feature flags.",
			Author:   "Go Community",
			Category: CategoryPackaging,
			Example: GetExampleForProverb("community-043"),
			Explanation: "Build constraints enable compile-time feature flags, allowing different builds for different environments or feature sets.",
			Tags:        []string{"build-constraints", "feature-flags", "conditional-compilation"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-044": {
			Title:    "Interface segregation for testability",
			Text:     "Interface segregation for testability.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-044"),
			Explanation: "Small, focused interfaces are easier to mock and test, following the interface segregation principle for better testability.",
			Tags:        []string{"interface-segregation", "testability", "mocking"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-045": {
			Title:    "Use testify for rich assertions",
			Text:     "Use testify for rich assertions.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-045"),
			Explanation: "testify provides rich assertions and mocking capabilities, making tests more readable and maintainable than basic if statements.",
			Tags:        []string{"testify", "assertions", "testing-framework"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-046": {
			Title:    "Test helpers reduce duplication",
			Text:     "Test helpers reduce duplication.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-046"),
			Explanation: "Test helpers with t.Helper() and t.Cleanup() reduce duplication and ensure proper resource cleanup in tests.",
			Tags:        []string{"test-helpers", "cleanup", "duplication"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-047": {
			Title:    "Golden files for complex output testing",
			Text:     "Golden files for complex output testing.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-047"),
			Explanation: "Golden files store expected complex outputs, making it easy to test and update complex string or binary outputs.",
			Tags:        []string{"golden-files", "output-testing", "testdata"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-048": {
			Title:    "Benchmark with realistic data",
			Text:     "Benchmark with realistic data.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-048"),
			Explanation: "Benchmarks should use realistic data sizes and patterns to provide meaningful performance insights for production scenarios.",
			Tags:        []string{"benchmarking", "realistic-data", "performance-testing"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-049": {
			Title:    "Use dependency injection for flexibility",
			Text:     "Use dependency injection for flexibility.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-049"),
			Explanation: "Dependency injection makes code more testable, flexible, and follows the dependency inversion principle.",
			Tags:        []string{"dependency-injection", "testability", "flexibility"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-050": {
			Title:    "Repository pattern for data access",
			Text:     "Repository pattern for data access.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-050"),
			Explanation: "Repository pattern abstracts data access, enabling easy testing and switching between different storage implementations.",
			Tags:        []string{"repository-pattern", "data-access", "abstraction"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-051": {
			Title:    "Command pattern for undo/redo operations",
			Text:     "Command pattern for undo/redo operations.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-051"),
			Explanation: "Command pattern encapsulates operations as objects, enabling undo/redo functionality and operation queuing.",
			Tags:        []string{"command-pattern", "undo-redo", "operations"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-052": {
			Title:    "Strategy pattern for algorithm selection",
			Text:     "Strategy pattern for algorithm selection.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-052"),
			Explanation: "Strategy pattern enables runtime algorithm selection, making code more flexible and following the open/closed principle.",
			Tags:        []string{"strategy-pattern", "algorithm-selection", "flexibility"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-053": {
			Title:    "Observer pattern for event handling",
			Text:     "Observer pattern for event handling.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-053"),
			Explanation: "Observer pattern enables loose coupling between event producers and consumers, supporting reactive programming patterns.",
			Tags:        []string{"observer-pattern", "event-handling", "reactive"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-054": {
			Title:    "Decorator pattern for middleware",
			Text:     "Decorator pattern for middleware.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-054"),
			Explanation: "Decorator pattern enables composable middleware chains, adding cross-cutting concerns without modifying core logic.",
			Tags:        []string{"decorator-pattern", "middleware", "cross-cutting"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-055": {
			Title:    "Factory pattern for object creation",
			Text:     "Factory pattern for object creation.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-055"),
			Explanation: "Factory pattern abstracts object creation, enabling runtime type selection and configuration-based instantiation.",
			Tags:        []string{"factory-pattern", "object-creation", "abstraction"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-056": {
			Title:    "Use channels as first-class values",
			Text:     "Use channels as first-class values.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-056"),
			Explanation: "Channels are first-class values that can be passed, stored, and manipulated, enabling powerful concurrent patterns.",
			Tags:        []string{"channels", "first-class", "composition"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-057": {
			Title:    "Cancellation propagation through context",
			Text:     "Cancellation propagation through context.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-057"),
			Explanation: "Context enables cancellation to propagate through call stacks and goroutine hierarchies, ensuring clean shutdown.",
			Tags:        []string{"cancellation", "context", "propagation"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-058": {
			Title:    "Use reflection sparingly and cache results",
			Text:     "Use reflection sparingly and cache results.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-058"),
			Explanation: "Reflection is expensive; cache reflection results and use code generation when possible for better performance.",
			Tags:        []string{"reflection", "caching", "performance"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-059": {
			Title:    "Escape analysis awareness for performance",
			Text:     "Escape analysis awareness for performance.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-059"),
			Explanation: "Understanding escape analysis helps write allocation-efficient code by keeping values on the stack when possible.",
			Tags:        []string{"escape-analysis", "stack-allocation", "performance"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-060": {
			Title:    "Use go:generate for code generation",
			Text:     "Use go:generate for code generation.",
			Author:   "Go Community",
			Category: CategoryPackaging,
			Example: GetExampleForProverb("community-060"),
			Explanation: "go:generate automates code generation, reducing boilerplate and ensuring generated code stays in sync with source.",
			Tags:        []string{"go:generate", "code-generation", "automation"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-061": {
			Title:    "Graceful degradation with fallbacks",
			Text:     "Graceful degradation with fallbacks.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-061"),
			Explanation: "Graceful degradation ensures systems remain functional even when dependencies fail, improving overall reliability.",
			Tags:        []string{"graceful-degradation", "fallbacks", "reliability"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-062": {
			Title:    "Bulkhead pattern for fault isolation",
			Text:     "Bulkhead pattern for fault isolation.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-062"),
			Explanation: "Bulkhead pattern isolates resources to prevent failures in one area from affecting others, improving system resilience.",
			Tags:        []string{"bulkhead-pattern", "fault-isolation", "resilience"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-063": {
			Title:    "Retry with exponential backoff",
			Text:     "Retry with exponential backoff.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-063"),
			Explanation: "Exponential backoff prevents overwhelming failing services while providing reasonable retry behavior for transient failures.",
			Tags:        []string{"retry", "exponential-backoff", "resilience"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-064": {
			Title:    "Use context for deadlines and cancellation",
			Text:     "Use context for deadlines and cancellation.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-064"),
			Explanation: "Context deadlines ensure operations don't run indefinitely, providing automatic timeout and cancellation capabilities.",
			Tags:        []string{"context", "deadlines", "cancellation"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-065": {
			Title:    "Memory-efficient string operations",
			Text:     "Memory-efficient string operations.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-065"),
			Explanation: "Use strings.Join() or pre-sized strings.Builder for efficient string operations, avoiding repeated concatenation.",
			Tags:        []string{"string-operations", "memory-efficiency", "performance"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-066": {
			Title:    "Use sync.RWMutex for read-heavy workloads",
			Text:     "Use sync.RWMutex for read-heavy workloads.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-066"),
			Explanation: "RWMutex allows multiple concurrent readers while ensuring exclusive access for writers, improving performance for read-heavy scenarios.",
			Tags:        []string{"sync.RWMutex", "read-heavy", "concurrency"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-067": {
			Title:    "Bounded queues prevent memory exhaustion",
			Text:     "Bounded queues prevent memory exhaustion.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-067"),
			Explanation: "Bounded queues with timeouts prevent memory exhaustion when producers outpace consumers, providing backpressure.",
			Tags:        []string{"bounded-queues", "backpressure", "memory-safety"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-068": {
			Title:    "Use interfaces for testing boundaries",
			Text:     "Use interfaces for testing boundaries.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-068"),
			Explanation: "Define interfaces at testing boundaries to enable easy mocking and isolation of external dependencies.",
			Tags:        []string{"testing-boundaries", "interfaces", "mocking"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-069": {
			Title:    "Validate early, fail fast",
			Text:     "Validate early, fail fast.",
			Author:   "Go Community",
			Category: CategoryErrors,
			Example: GetExampleForProverb("community-069"),
			Explanation: "Early validation and fast failure prevent invalid data from propagating through the system, making debugging easier.",
			Tags:        []string{"validation", "fail-fast", "error-handling"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-070": {
			Title:    "Use type aliases for domain modeling",
			Text:     "Use type aliases for domain modeling.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-070"),
			Explanation: "Type aliases provide type safety and domain clarity, preventing parameter mix-ups and making code more self-documenting.",
			Tags:        []string{"type-aliases", "domain-modeling", "type-safety"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-071": {
			Title:    "Use done channel for goroutine lifecycle management",
			Text:     "Use done channel for goroutine lifecycle management.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-071"),
			Explanation: "Done channels provide explicit lifecycle management for goroutines, enabling clean shutdown and resource cleanup.",
			Tags:        []string{"done-channel", "lifecycle", "goroutine-management"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-072": {
			Title:    "Implement backpressure with buffered channels",
			Text:     "Implement backpressure with buffered channels.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-072"),
			Explanation: "Backpressure mechanisms prevent fast producers from overwhelming slow consumers, maintaining system stability.",
			Tags:        []string{"backpressure", "flow-control", "stability"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-073": {
			Title:    "Use sync.Cond for complex coordination",
			Text:     "Use sync.Cond for complex coordination.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-073"),
			Explanation: "sync.Cond enables complex synchronization where goroutines wait for specific conditions, more flexible than simple channels.",
			Tags:        []string{"sync.Cond", "complex-coordination", "condition-variables"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-074": {
			Title:    "Implement graceful restart with signal handling",
			Text:     "Implement graceful restart with signal handling.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-074"),
			Explanation: "Signal handling enables zero-downtime deployments and graceful restarts, essential for production services.",
			Tags:        []string{"signal-handling", "graceful-restart", "zero-downtime"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-075": {
			Title:    "Use context.WithValue sparingly and type-safely",
			Text:     "Use context.WithValue sparingly and type-safely.",
			Author:   "Go Community",
			Category: CategoryConcurrency,
			Example: GetExampleForProverb("community-075"),
			Explanation: "Use typed keys and accessor functions for context values to prevent key collisions and provide type safety.",
			Tags:        []string{"context-values", "type-safety", "accessor-functions"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-076": {
			Title:    "Implement distributed tracing with context",
			Text:     "Implement distributed tracing with context.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-076"),
			Explanation: "Distributed tracing through context enables request flow visibility across microservices and system boundaries.",
			Tags:        []string{"distributed-tracing", "observability", "microservices"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-077": {
			Title:    "Use embedding for interface composition",
			Text:     "Use embedding for interface composition.",
			Author:   "Go Community",
			Category: CategoryInterfaces,
			Example: GetExampleForProverb("community-077"),
			Explanation: "Interface embedding creates composite interfaces from smaller ones, following the interface segregation principle.",
			Tags:        []string{"interface-embedding", "composition", "segregation"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-078": {
			Title:    "Implement saga pattern for distributed transactions",
			Text:     "Implement saga pattern for distributed transactions.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-078"),
			Explanation: "Saga pattern manages distributed transactions through compensating actions, ensuring eventual consistency.",
			Tags:        []string{"saga-pattern", "distributed-transactions", "eventual-consistency"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-079": {
			Title:    "Use CQRS for read/write separation",
			Text:     "Use CQRS for read/write separation.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-079"),
			Explanation: "CQRS separates read and write models, enabling independent scaling and optimization of each concern.",
			Tags:        []string{"CQRS", "read-write-separation", "scaling"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-080": {
			Title:    "Implement event sourcing for audit trails",
			Text:     "Implement event sourcing for audit trails.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-080"),
			Explanation: "Event sourcing stores state changes as events, providing complete audit trails and enabling temporal queries.",
			Tags:        []string{"event-sourcing", "audit-trail", "temporal-queries"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-081": {
			Title:    "Use hexagonal architecture for testability",
			Text:     "Use hexagonal architecture for testability.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-081"),
			Explanation: "Hexagonal architecture isolates business logic from external concerns, making code highly testable and maintainable.",
			Tags:        []string{"hexagonal-architecture", "ports-adapters", "testability"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-082": {
			Title:    "Implement domain events for loose coupling",
			Text:     "Implement domain events for loose coupling.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-082"),
			Explanation: "Domain events enable loose coupling between bounded contexts and support eventual consistency in distributed systems.",
			Tags:        []string{"domain-events", "loose-coupling", "bounded-contexts"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-083": {
			Title:    "Use value objects for domain modeling",
			Text:     "Use value objects for domain modeling.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-083"),
			Explanation: "Value objects encapsulate domain concepts with validation and behavior, ensuring invariants and preventing invalid states.",
			Tags:        []string{"value-objects", "domain-modeling", "invariants"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-084": {
			Title:    "Implement aggregate roots for consistency boundaries",
			Text:     "Implement aggregate roots for consistency boundaries.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-084"),
			Explanation: "Aggregate roots define consistency boundaries and ensure business rules are enforced within the aggregate.",
			Tags:        []string{"aggregate-roots", "consistency-boundaries", "business-rules"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-085": {
			Title:    "Use specification pattern for complex queries",
			Text:     "Use specification pattern for complex queries.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-085"),
			Explanation: "Specification pattern encapsulates business rules as composable objects, enabling complex query logic reuse.",
			Tags:        []string{"specification-pattern", "business-rules", "composable-queries"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-086": {
			Title:    "Implement outbox pattern for reliable messaging",
			Text:     "Implement outbox pattern for reliable messaging.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-086"),
			Explanation: "Outbox pattern ensures reliable message publishing by storing events in the same transaction as business data.",
			Tags:        []string{"outbox-pattern", "reliable-messaging", "transactional-outbox"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-087": {
			Title:    "Use property-based testing for edge cases",
			Text:     "Use property-based testing for edge cases.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-087"),
			Explanation: "Property-based testing generates random inputs to verify invariants, finding edge cases that example-based tests miss.",
			Tags:        []string{"property-based-testing", "edge-cases", "invariants"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-088": {
			Title:    "Implement contract testing for microservices",
			Text:     "Implement contract testing for microservices.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-088"),
			Explanation: "Contract testing ensures API compatibility between services without requiring integration test environments.",
			Tags:        []string{"contract-testing", "microservices", "api-compatibility"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-089": {
			Title:    "Use mutation testing for test quality",
			Text:     "Use mutation testing for test quality.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-089"),
			Explanation: "Mutation testing evaluates test quality by introducing bugs and checking if tests catch them, revealing weak test coverage.",
			Tags:        []string{"mutation-testing", "test-quality", "coverage-analysis"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-090": {
			Title:    "Implement chaos engineering for resilience",
			Text:     "Implement chaos engineering for resilience.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-090"),
			Explanation: "Chaos engineering intentionally introduces failures to test system resilience and discover weaknesses before they cause outages.",
			Tags:        []string{"chaos-engineering", "resilience-testing", "failure-injection"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-091": {
			Title:    "Use fuzzing for security testing",
			Text:     "Use fuzzing for security testing.",
			Author:   "Go Community",
			Category: CategoryTesting,
			Example: GetExampleForProverb("community-091"),
			Explanation: "Fuzzing generates random inputs to find crashes, security vulnerabilities, and edge cases in parsing and validation code.",
			Tags:        []string{"fuzzing", "security-testing", "vulnerability-discovery"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-092": {
			Title:    "Implement load shedding for overload protection",
			Text:     "Implement load shedding for overload protection.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-092"),
			Explanation: "Load shedding protects services from overload by rejecting requests when capacity is exceeded, maintaining service for accepted requests.",
			Tags:        []string{"load-shedding", "overload-protection", "capacity-management"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-093": {
			Title:    "Use adaptive timeouts based on latency",
			Text:     "Use adaptive timeouts based on latency.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-093"),
			Explanation: "Adaptive timeouts adjust based on observed latency patterns, providing better resilience than fixed timeouts.",
			Tags:        []string{"adaptive-timeouts", "latency-based", "dynamic-configuration"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-094": {
			Title:    "Implement request deduplication for idempotency",
			Text:     "Implement request deduplication for idempotency.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example: GetExampleForProverb("community-094"),
			Explanation: "Request deduplication ensures idempotency by caching results of operations, preventing duplicate processing.",
			Tags:        []string{"deduplication", "idempotency", "request-caching"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-095": {
			Title:    "Use connection pooling for database efficiency",
			Text:     "Use connection pooling for database efficiency.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example: GetExampleForProverb("community-095"),
			Explanation: "Proper connection pool configuration balances resource usage with performance, preventing connection exhaustion.",
			Tags:        []string{"connection-pooling", "database-optimization", "resource-management"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-096": {
			Title:    "Implement batch processing for efficiency",
			Text:     "Implement batch processing for efficiency.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example:     GetExampleForProverb("community-096"),
			Explanation: "Batch processing reduces overhead by grouping operations, improving throughput for high-volume scenarios.",
			Tags:        []string{"batch-processing", "throughput-optimization", "bulk-operations"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-097": {
			Title:    "Use streaming for large data processing",
			Text:     "Use streaming for large data processing.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example:     GetExampleForProverb("community-097"),
			Explanation: "Streaming processes data incrementally without loading everything into memory, enabling handling of arbitrarily large datasets.",
			Tags:        []string{"streaming", "memory-efficiency", "large-data"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-098": {
			Title:    "Implement zero-allocation string operations",
			Text:     "Implement zero-allocation string operations.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example:     GetExampleForProverb("community-098"),
			Explanation: "Zero-allocation string operations avoid unnecessary memory allocations, improving performance in hot paths.",
			Tags:        []string{"zero-allocation", "string-optimization", "hot-path"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-099": {
			Title:    "Use CPU profiling to identify bottlenecks",
			Text:     "Use CPU profiling to identify bottlenecks.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example:     GetExampleForProverb("community-099"),
			Explanation: "CPU profiling reveals actual performance bottlenecks, guiding optimization efforts to where they'll have the most impact.",
			Tags:        []string{"cpu-profiling", "bottleneck-identification", "performance-analysis"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-100": {
			Title:    "Implement memory-efficient data structures",
			Text:     "Implement memory-efficient data structures.",
			Author:   "Go Community",
			Category: CategoryPerformance,
			Example:     GetExampleForProverb("community-100"),
			Explanation: "Memory-efficient data structures reduce GC pressure and improve cache locality, especially important for high-throughput applications.",
			Tags:        []string{"memory-efficiency", "data-structures", "gc-optimization"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-101": {
			Title:    "Don't communicate by sharing memory; share memory by communicating",
			Text:     "Don't communicate by sharing memory; share memory by communicating.",
			Author:   "Rob Pike",
			Category: CategoryConcurrency,
			Example:     GetExampleForProverb("community-101"),
			Explanation: "Channels provide a safer and more idiomatic way to coordinate goroutines than shared memory with locks.",
			Tags:        []string{"channels", "communication", "goroutines", "rob-pike"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-102": {
			Title:    "Concurrency is not parallelism",
			Text:     "Concurrency is not parallelism.",
			Author:   "Rob Pike",
			Category: CategoryConcurrency,
			Example:     GetExampleForProverb("community-102"),
			Explanation: "Concurrency is about structure and composition, while parallelism is about execution. Go enables both.",
			Tags:        []string{"concurrency", "parallelism", "goroutines", "rob-pike"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-103": {
			Title:    "Channels orchestrate; mutexes serialize",
			Text:     "Channels orchestrate; mutexes serialize.",
			Author:   "Rob Pike",
			Category: CategoryConcurrency,
			Example:     GetExampleForProverb("community-103"),
			Explanation: "Use channels for coordination and workflow, mutexes for protecting shared state. Each has its place.",
			Tags:        []string{"channels", "mutexes", "orchestration", "serialization"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-104": {
			Title:    "The bigger the interface, the weaker the abstraction",
			Text:     "The bigger the interface, the weaker the abstraction.",
			Author:   "Rob Pike",
			Category: CategoryInterfaces,
			Example:     GetExampleForProverb("community-104"),
			Explanation: "Small, focused interfaces are more flexible, testable, and easier to implement than large, monolithic ones.",
			Tags:        []string{"interfaces", "abstraction", "design", "rob-pike"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-105": {
			Title:    "Make it work, make it right, make it fast",
			Text:     "Make it work, make it right, make it fast.",
			Author:   "Kent Beck",
			Category: CategoryDesign,
			Example:     GetExampleForProverb("community-105"),
			Explanation: "Focus on correctness first, then clean design, and finally performance. Premature optimization is the root of all evil.",
			Tags:        []string{"development-process", "optimization", "design", "kent-beck"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-106": {
			Title:    "Errors are values",
			Text:     "Errors are values.",
			Author:   "Rob Pike",
			Category: CategoryErrors,
			Example:     GetExampleForProverb("community-106"),
			Explanation: "Go treats errors as ordinary values, not exceptions. This makes error handling explicit and composable.",
			Tags:        []string{"errors", "values", "error-handling", "rob-pike"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-107": {
			Title:    "Don't panic",
			Text:     "Don't panic.",
			Author:   "Rob Pike",
			Category: CategoryErrors,
			Example:     GetExampleForProverb("community-107"),
			Explanation: "Use panic only for truly unrecoverable situations. Return errors for conditions that callers can handle.",
			Tags:        []string{"panic", "errors", "error-handling", "rob-pike"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-108": {
			Title:    "Design the architecture, name the components, document the details",
			Text:     "Design the architecture, name the components, document the details.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example:     GetExampleForProverb("community-108"),
			Explanation: "Good software starts with clear architecture, uses meaningful names, and documents the reasoning behind decisions.",
			Tags:        []string{"architecture", "naming", "documentation", "design"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-109": {
			Title:    "Documentation is for users",
			Text:     "Documentation is for users.",
			Author:   "Go Community",
			Category: CategoryIdioms,
			Example:     GetExampleForProverb("community-109"),
			Explanation: "Write documentation from the user's perspective, focusing on what they need to know, not how it works internally.",
			Tags:        []string{"documentation", "user-focused", "api-design"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-110": {
			Title:    "Don't just check errors, handle them gracefully",
			Text:     "Don't just check errors, handle them gracefully.",
			Author:   "Dave Cheney",
			Category: CategoryErrors,
			Example:     GetExampleForProverb("community-110"),
			Explanation: "Error handling should add context, enable recovery, and help with debugging. Don't just log and ignore.",
			Tags:        []string{"error-handling", "graceful-degradation", "dave-cheney"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-111": {
			Title:    "Eliminate error handling by eliminating errors",
			Text:     "Eliminate error handling by eliminating errors.",
			Author:   "Dave Cheney",
			Category: CategoryErrors,
			Example:     GetExampleForProverb("community-111"),
			Explanation: "Design APIs and code paths that reduce the number of possible error conditions rather than just handling them.",
			Tags:        []string{"error-elimination", "api-design", "dave-cheney"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-112": {
			Title:    "Import what you use; use what you import",
			Text:     "Import what you use; use what you import.",
			Author:   "Go Community",
			Category: CategoryPackaging,
			Example:     GetExampleForProverb("community-112"),
			Explanation: "Keep imports clean and minimal. Unused imports add confusion and increase compilation time.",
			Tags:        []string{"imports", "clean-code", "compilation"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-113": {
			Title:    "gofmt's style is no one's favorite, yet gofmt is everyone's favorite",
			Text:     "gofmt's style is no one's favorite, yet gofmt is everyone's favorite.",
			Author:   "Rob Pike",
			Category: CategoryIdioms,
			Example:     GetExampleForProverb("community-113"),
			Explanation: "Consistent formatting is more important than personal preferences. gofmt eliminates style debates and makes code uniform.",
			Tags:        []string{"gofmt", "formatting", "consistency", "rob-pike"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-114": {
			Title:    "A little copying is better than a little dependency",
			Text:     "A little copying is better than a little dependency.",
			Author:   "Rob Pike",
			Category: CategoryPackaging,
			Example:     GetExampleForProverb("community-114"),
			Explanation: "Small amounts of duplication can be preferable to adding dependencies, especially for simple utility functions.",
			Tags:        []string{"dependencies", "copying", "duplication", "rob-pike"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-115": {
			Title:    "Syscall must always be guarded with build tags",
			Text:     "Syscall must always be guarded with build tags.",
			Author:   "Go Community",
			Category: CategoryPackaging,
			Example:     GetExampleForProverb("community-115"),
			Explanation: "Platform-specific code should be isolated with build tags to ensure cross-platform compatibility.",
			Tags:        []string{"syscall", "build-tags", "cross-platform"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-116": {
			Title:    "Cgo must always be guarded with build tags",
			Text:     "Cgo must always be guarded with build tags.",
			Author:   "Go Community",
			Category: CategoryPackaging,
			Example:     GetExampleForProverb("community-116"),
			Explanation: "Cgo code should be optional with pure Go fallbacks to maintain portability and reduce build complexity.",
			Tags:        []string{"cgo", "build-tags", "portability"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-117": {
			Title:    "Cgo is not Go",
			Text:     "Cgo is not Go.",
			Author:   "Rob Pike",
			Category: CategoryPackaging,
			Example:     GetExampleForProverb("community-117"),
			Explanation: "Cgo sacrifices many of Go's advantages. Use it sparingly and only when pure Go solutions aren't viable.",
			Tags:        []string{"cgo", "pure-go", "cross-compilation", "rob-pike"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-118": {
			Title:    "With the unsafe package there are no guarantees",
			Text:     "With the unsafe package there are no guarantees.",
			Author:   "Rob Pike",
			Category: CategoryPerformance,
			Example:     GetExampleForProverb("community-118"),
			Explanation: "The unsafe package bypasses Go's type safety and memory safety. Use only when absolutely necessary and with extreme caution.",
			Tags:        []string{"unsafe", "safety", "performance", "rob-pike"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-119": {
			Title:    "Clear is better than clever",
			Text:     "Clear is better than clever.",
			Author:   "Go Community",
			Category: CategoryDesign,
			Example:     GetExampleForProverb("community-119"),
			Explanation: "Write code for humans to read. Clarity and maintainability are more important than showing off clever tricks.",
			Tags:        []string{"clarity", "readability", "maintainability"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-120": {
			Title:    "Reflection is never clear",
			Text:     "Reflection is never clear.",
			Author:   "Rob Pike",
			Category: CategoryPerformance,
			Example:     GetExampleForProverb("community-120"),
			Explanation: "Reflection makes code harder to understand and maintain. Use it only when compile-time solutions aren't possible.",
			Tags:        []string{"reflection", "clarity", "performance", "rob-pike"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-121": {
			Title:    "Errors should be opaque",
			Text:     "Errors should be opaque.",
			Author:   "Dave Cheney",
			Category: CategoryErrors,
			Example:     GetExampleForProverb("community-121"),
			Explanation: "Don't depend on error message content. Use error types, wrapping, and errors.Is/As for robust error handling.",
			Tags:        []string{"error-opacity", "error-types", "dave-cheney"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-122": {
			Title:    "Assert errors for behavior, not type",
			Text:     "Assert errors for behavior, not type.",
			Author:   "Dave Cheney",
			Category: CategoryErrors,
			Example:     GetExampleForProverb("community-122"),
			Explanation: "Check what an error can do (behavior) rather than what it is (type). This creates more flexible error handling.",
			Tags:        []string{"error-behavior", "interfaces", "dave-cheney"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-123": {
			Title:    "Never ignore errors",
			Text:     "Never ignore errors.",
			Author:   "Go Community",
			Category: CategoryErrors,
			Example:     GetExampleForProverb("community-123"),
			Explanation: "Every error represents a potential failure mode. Handle them appropriately or explicitly acknowledge ignoring them.",
			Tags:        []string{"error-handling", "reliability", "explicit-ignore"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
		"community-124": {
			Title:    "Handle errors at the right level",
			Text:     "Handle errors at the right level.",
			Author:   "Go Community",
			Category: CategoryErrors,
			Example:     GetExampleForProverb("community-124"),
			Explanation: "Low-level functions should add context and propagate errors. High-level functions should decide on recovery strategies.",
			Tags:        []string{"error-levels", "context", "recovery-strategy"},
			CreatedAt:   time.Now(),
			Source:      SourceCommunity,
		},
	}
}

package proverbs

import "time"

// GetOfficialProverbs returns the original Go proverbs from Rob Pike's talk
func GetOfficialProverbs() map[string]Proverb {
	return map[string]Proverb{
		"official-001": {
			Title:       "Don't communicate by sharing memory, share memory by communicating",
			Text:        "Don't communicate by sharing memory, share memory by communicating.",
			Author:      "Rob Pike",
			Category:    CategoryConcurrency,
			Example:     GetExampleForProverb("official-001"),
			Explanation: "Use channels to coordinate goroutines instead of shared variables with locks. This leads to cleaner, more maintainable concurrent code.",
			Tags:        []string{"concurrency", "channels", "goroutines"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-002": {
			Title:       "Concurrency is not parallelism",
			Text:        "Concurrency is not parallelism.",
			Author:      "Rob Pike",
			Category:    CategoryConcurrency,
			Example:     GetExampleForProverb("official-002"),
			Explanation: "Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once. They're related but different concepts.",
			Tags:        []string{"concurrency", "parallelism", "goroutines"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-003": {
			Title:       "Channels orchestrate; mutexes serialize",
			Text:        "Channels orchestrate; mutexes serialize.",
			Author:      "Rob Pike",
			Category:    CategoryConcurrency,
			Example:     GetExampleForProverb("official-003"),
			Explanation: "Use channels to coordinate and orchestrate goroutines. Use mutexes to protect shared data structures from concurrent access.",
			Tags:        []string{"channels", "mutexes", "synchronization"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-004": {
			Title:       "The bigger the interface, the weaker the abstraction",
			Text:        "The bigger the interface, the weaker the abstraction.",
			Author:      "Rob Pike",
			Category:    CategoryInterfaces,
			Example:     GetExampleForProverb("official-004"),
			Explanation: "Small interfaces are more flexible and easier to implement. They promote composition over large, monolithic interfaces.",
			Tags:        []string{"interfaces", "abstraction", "composition"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-005": {
			Title:       "Make the zero value useful",
			Text:        "Make the zero value useful.",
			Author:      "Rob Pike",
			Category:    CategoryDesign,
			Example:     GetExampleForProverb("official-005"),
			Explanation: "Design types so their zero value is immediately useful without explicit initialization. This makes APIs more convenient and less error-prone.",
			Tags:        []string{"zero-value", "design", "initialization"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-006": {
			Title:       "interface{} says nothing",
			Text:        "interface{} says nothing.",
			Author:      "Rob Pike",
			Category:    CategoryInterfaces,
			Example:     GetExampleForProverb("official-006"),
			Explanation: "The empty interface (now 'any') provides no information about what the code expects. Use specific types or well-defined interfaces instead.",
			Tags:        []string{"interfaces", "types", "generics"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-007": {
			Title:       "Gofmt's style is no one's favorite, yet gofmt is everyone's favorite",
			Text:        "Gofmt's style is no one's favorite, yet gofmt is everyone's favorite.",
			Author:      "Rob Pike",
			Category:    CategoryIdioms,
			Example:     GetExampleForProverb("official-007"),
			Explanation: "Consistent formatting eliminates debates about style and makes code more readable. Use gofmt and modern linting tools.",
			Tags:        []string{"formatting", "tooling", "consistency"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-008": {
			Title:       "A little copying is better than a little dependency",
			Text:        "A little copying is better than a little dependency.",
			Author:      "Rob Pike",
			Category:    CategoryPackaging,
			Example:     GetExampleForProverb("official-008"),
			Explanation: "Don't add dependencies for trivial functionality. A few lines of copied code is often better than a large external dependency.",
			Tags:        []string{"dependencies", "copying", "simplicity"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-009": {
			Title:       "Syscall must always be guarded with build tags",
			Text:        "Syscall must always be guarded with build tags.",
			Author:      "Rob Pike",
			Category:    CategoryPackaging,
			Example:     GetExampleForProverb("official-009"),
			Explanation: "Platform-specific code should be isolated using build tags to ensure cross-platform compatibility.",
			Tags:        []string{"syscalls", "build-tags", "cross-platform"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-010": {
			Title:       "Cgo must always be guarded with build tags",
			Text:        "Cgo must always be guarded with build tags.",
			Author:      "Rob Pike",
			Category:    CategoryPackaging,
			Example:     GetExampleForProverb("official-010"),
			Explanation: "Cgo code should have pure Go alternatives to maintain portability and allow builds without C dependencies.",
			Tags:        []string{"cgo", "build-tags", "portability"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-011": {
			Title:       "Cgo is not Go",
			Text:        "Cgo is not Go.",
			Author:      "Rob Pike",
			Category:    CategoryPackaging,
			Example:     GetExampleForProverb("official-011"),
			Explanation: "Cgo calls have significant overhead and complexity. Use pure Go solutions when possible for better performance and maintainability.",
			Tags:        []string{"cgo", "performance", "complexity"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-012": {
			Title:       "With the unsafe package there are no guarantees",
			Text:        "With the unsafe package there are no guarantees.",
			Author:      "Rob Pike",
			Category:    CategoryDesign,
			Example:     GetExampleForProverb("official-012"),
			Explanation: "The unsafe package breaks Go's safety guarantees. Use it sparingly and with extreme caution, preferring safe alternatives.",
			Tags:        []string{"unsafe", "safety", "memory"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-013": {
			Title:       "Clear is better than clever",
			Text:        "Clear is better than clever.",
			Author:      "Rob Pike",
			Category:    CategorySimplicity,
			Example:     GetExampleForProverb("official-013"),
			Explanation: "Write code that is easy to understand and maintain. Clever optimizations are rarely worth the cost in readability.",
			Tags:        []string{"clarity", "readability", "simplicity"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-014": {
			Title:       "Reflection is never clear",
			Text:        "Reflection is never clear.",
			Author:      "Rob Pike",
			Category:    CategoryReflection,
			Example:     GetExampleForProverb("official-014"),
			Explanation: "Reflection makes code hard to understand and debug. Use interfaces, generics, or code generation instead when possible.",
			Tags:        []string{"reflection", "interfaces", "generics"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-015": {
			Title:       "Errors are values",
			Text:        "Errors are values.",
			Author:      "Rob Pike",
			Category:    CategoryErrors,
			Example:     GetExampleForProverb("official-015"),
			Explanation: "Errors are just values that can be programmed like any other value. Don't treat them as exceptions.",
			Tags:        []string{"errors", "values", "error-handling"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-016": {
			Title:       "Don't just check errors, handle them gracefully",
			Text:        "Don't just check errors, handle them gracefully.",
			Author:      "Rob Pike",
			Category:    CategoryErrors,
			Example:     GetExampleForProverb("official-016"),
			Explanation: "Handle errors appropriately for your application. Provide fallbacks, retry logic, or meaningful error messages instead of just panicking.",
			Tags:        []string{"error-handling", "graceful", "fallbacks"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-017": {
			Title:       "Design the architecture, name the components, document the details",
			Text:        "Design the architecture, name the components, document the details.",
			Author:      "Rob Pike",
			Category:    CategoryDesign,
			Example:     GetExampleForProverb("official-017"),
			Explanation: "Start with high-level architecture, use clear and descriptive names for components, and document the important details and decisions.",
			Tags:        []string{"architecture", "naming", "documentation"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
		"official-018": {
			Title:       "Documentation is for users",
			Text:        "Documentation is for users.",
			Author:      "Rob Pike",
			Category:    CategoryDesign,
			Example:     GetExampleForProverb("official-018"),
			Explanation: "Write documentation that helps users understand how to use your code effectively. Include examples and explain the 'why', not just the 'what'.",
			Tags:        []string{"documentation", "users", "examples"},
			CreatedAt:   time.Date(2015, 11, 18, 0, 0, 0, 0, time.UTC),
			Source:      SourceOfficial,
		},
	}
}

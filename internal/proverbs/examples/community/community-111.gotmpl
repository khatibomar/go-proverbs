// Eliminate error handling by eliminating errors

package main

import (
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strconv"
	"strings"
)

// Bad: API design that forces error handling
func badAPIDesign() {
	// Function that can return errors for many reasons
	result, err := parseConfigWithErrors("config.json")
	if err != nil {
		// Have to handle multiple possible error cases
		fmt.Println("Error parsing config:", err)
		return
	}
	
	// More error handling...
	fmt.Println("Config parsed:", result)
}

// Good: API design that eliminates error conditions
func goodAPIDesign() {
	// Function with sensible defaults that can't fail
	config := parseConfigWithDefaults("config.json")
	
	// No error handling needed!
	fmt.Println("Config parsed:", config)
}

// Example 1: File operations

// Bad: Can return error for many reasons
func readFileWithErrors(path string) ([]byte, error) {
	return os.ReadFile(path)
}

// Good: Uses defaults, can't fail
func readFileWithFallback(path string, fallback []byte) []byte {
	data, err := os.ReadFile(path)
	if err != nil {
		return fallback
	}
	return data
}

// Example 2: Configuration parsing

// Bad: Multiple error paths
func parseConfigWithErrors(path string) (map[string]string, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("failed to open config: %w", err)
	}
	defer file.Close()
	
	config := make(map[string]string)
	
	// Read line by line
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		parts := strings.SplitN(line, "=", 2)
		if len(parts) != 2 {
			return nil, fmt.Errorf("invalid config line: %s", line)
		}
		config[strings.TrimSpace(parts[0])] = strings.TrimSpace(parts[1])
	}
	
	if err := scanner.Err(); err != nil {
		return nil, fmt.Errorf("error reading config: %w", err)
	}
	
	return config, nil
}

// Good: No errors, uses defaults
func parseConfigWithDefaults(path string) map[string]string {
	config := defaultConfig() // Start with defaults
	
	file, err := os.Open(path)
	if err != nil {
		// Just use defaults if file doesn't exist
		return config
	}
	defer file.Close()
	
	// Try to read line by line, ignoring invalid lines
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		parts := strings.SplitN(line, "=", 2)
		if len(parts) == 2 {
			config[strings.TrimSpace(parts[0])] = strings.TrimSpace(parts[1])
		}
	}
	
	// Even if scanner.Err() exists, we still return what we have
	return config
}

func defaultConfig() map[string]string {
	return map[string]string{
		"host":     "localhost",
		"port":     "8080",
		"timeout":  "30s",
		"retries":  "3",
		"log_level": "info",
	}
}

// Example 3: Type conversion

// Bad: Can return error
func parseIntWithError(s string) (int, error) {
	return strconv.Atoi(s)
}

// Good: Uses default, can't fail
func parseIntWithDefault(s string, defaultVal int) int {
	val, err := strconv.Atoi(s)
	if err != nil {
		return defaultVal
	}
	return val
}

// Example 4: Resource management

// Bad: Can fail to create directory
func ensureDirWithError(path string) error {
	return os.MkdirAll(path, 0755)
}

// Good: Self-healing, can't fail
func ensureDir(path string) string {
	// Try to create directory
	err := os.MkdirAll(path, 0755)
	if err != nil {
		// Fall back to temp directory if can't create
		tempDir := filepath.Join(os.TempDir(), filepath.Base(path))
		_ = os.MkdirAll(tempDir, 0755) // Best effort
		return tempDir
	}
	return path
}

// Example 5: Validation

// Bad: Returns error for invalid input
func validateUserWithError(name string, age int) error {
	if name == "" {
		return fmt.Errorf("name cannot be empty")
	}
	if age < 0 || age > 120 {
		return fmt.Errorf("age must be between 0 and 120")
	}
	return nil
}

// Good: Sanitizes input, can't fail
func sanitizeUser(name string, age int) (string, int) {
	// Sanitize name
	if name == "" {
		name = "Anonymous"
	}
	
	// Clamp age to valid range
	if age < 0 {
		age = 0
	} else if age > 120 {
		age = 120
	}
	
	return name, age
}

// Example 6: File writing with atomic operations

// Bad: Multiple error paths
func writeFileWithErrors(filename string, data []byte) error {
	return os.WriteFile(filename, data, 0644)
}

// Good: Uses atomic write pattern, reports success
func writeFileAtomic(filename string, data []byte) bool {
	// Create temp file
	tmpFile, err := os.CreateTemp(filepath.Dir(filename), "*.tmp")
	if err != nil {
		return false
	}
	tmpName := tmpFile.Name()
	defer os.Remove(tmpName) // Clean up on any failure
	
	// Write data
	_, err = tmpFile.Write(data)
	if err != nil {
		tmpFile.Close()
		return false
	}
	
	// Close file
	if err = tmpFile.Close(); err != nil {
		return false
	}
	
	// Atomic rename
	if err = os.Rename(tmpName, filename); err != nil {
		return false
	}
	
	return true
}

func main() {
	// Example usage
	goodAPIDesign()
	
	// File reading example
	data := readFileWithFallback("missing.txt", []byte("default content"))
	fmt.Println("File content (or default):", string(data))
	
	// Config parsing example
	config := parseConfigWithDefaults("config.txt")
	fmt.Println("Config with defaults:", config)
	
	// Type conversion example
	val := parseIntWithDefault("not-a-number", 42)
	fmt.Println("Parsed integer (or default):", val)
	
	// Directory example
	dir := ensureDir("/path/that/might/not/be/writable")
	fmt.Println("Working directory:", dir)
	
	// Validation example
	name, age := sanitizeUser("", -5)
	fmt.Printf("Sanitized user: %s, %d years old\n", name, age)
	
	// File writing example
	success := writeFileAtomic("output.txt", []byte("Hello, World!"))
	fmt.Println("File written successfully:", success)
	
	fmt.Println("\nKey points about eliminating errors:")
	fmt.Println("1. Design APIs that can't fail by using sensible defaults")
	fmt.Println("2. Sanitize inputs instead of rejecting them")
	fmt.Println("3. Use self-healing mechanisms for resources")
	fmt.Println("4. Return success indicators instead of errors when appropriate")
	fmt.Println("5. Provide fallback mechanisms for operations that might fail")
	fmt.Println("6. Use atomic operations to ensure consistency")
}
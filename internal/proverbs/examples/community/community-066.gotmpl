// Use sync.RWMutex for read-heavy workloads
type Cache struct {
    mu   sync.RWMutex
    data map[string]interface{}
}

func NewCache() *Cache {
    return &Cache{
        data: make(map[string]interface{}),
    }
}

func (c *Cache) Get(key string) (interface{}, bool) {
    c.mu.RLock()
    defer c.mu.RUnlock()
    
    value, exists := c.data[key]
    return value, exists
}

func (c *Cache) Set(key string, value interface{}) {
    c.mu.Lock()
    defer c.mu.Unlock()
    
    c.data[key] = value
}

func (c *Cache) Delete(key string) {
    c.mu.Lock()
    defer c.mu.Unlock()
    
    delete(c.data, key)
}

func main() {
    cache := NewCache()
    
    // Set some data
    cache.Set("user:1", "John")
    cache.Set("user:2", "Jane")
    
    var wg sync.WaitGroup
    
    // Multiple concurrent readers (allowed with RWMutex)
    for i := 0; i < 10; i++ {
        wg.Add(1)
        go func(id int) {
            defer wg.Done()
            if value, exists := cache.Get("user:1"); exists {
                fmt.Printf("Reader %d: %v\n", id, value)
            }
        }(i)
    }
    
    wg.Wait()
}
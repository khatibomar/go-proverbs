// Load shedding protects services from overload
type LoadShedder struct {
    maxConcurrent int64
    current       int64
    rejected      int64
}

func NewLoadShedder(maxConcurrent int) *LoadShedder {
    return &LoadShedder{
        maxConcurrent: int64(maxConcurrent),
    }
}

func (ls *LoadShedder) Allow() bool {
    current := atomic.LoadInt64(&ls.current)
    if current >= ls.maxConcurrent {
        atomic.AddInt64(&ls.rejected, 1)
        return false
    }
    
    return atomic.CompareAndSwapInt64(&ls.current, current, current+1)
}

func (ls *LoadShedder) Done() {
    atomic.AddInt64(&ls.current, -1)
}

func (ls *LoadShedder) Stats() (current, rejected int64) {
    return atomic.LoadInt64(&ls.current), atomic.LoadInt64(&ls.rejected)
}

// HTTP middleware with load shedding
func LoadSheddingMiddleware(maxConcurrent int) func(http.Handler) http.Handler {
    shedder := NewLoadShedder(maxConcurrent)
    
    return func(next http.Handler) http.Handler {
        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
            if !shedder.Allow() {
                w.WriteHeader(http.StatusTooManyRequests)
                w.Write([]byte("Server overloaded, please try again later"))
                return
            }
            
            defer shedder.Done()
            next.ServeHTTP(w, r)
        })
    }
}

// Adaptive load shedding based on response time
type AdaptiveLoadShedder struct {
    mu              sync.RWMutex
    maxConcurrent   int64
    current         int64
    avgResponseTime time.Duration
    threshold       time.Duration
}

func (als *AdaptiveLoadShedder) Allow() bool {
    als.mu.RLock()
    avgTime := als.avgResponseTime
    threshold := als.threshold
    als.mu.RUnlock()
    
    // Reduce capacity if response time is high
    capacity := als.maxConcurrent
    if avgTime > threshold {
        capacity = capacity / 2
    }
    
    current := atomic.LoadInt64(&als.current)
    if current >= capacity {
        return false
    }
    
    return atomic.CompareAndSwapInt64(&als.current, current, current+1)
}

func (als *AdaptiveLoadShedder) Done(responseTime time.Duration) {
    atomic.AddInt64(&als.current, -1)
    
    // Update average response time (simple moving average)
    als.mu.Lock()
    als.avgResponseTime = (als.avgResponseTime + responseTime) / 2
    als.mu.Unlock()
}
// errgroup for error handling in goroutines
func processItem(ctx context.Context, item int) error {
    select {
    case <-ctx.Done():
        return ctx.Err()
    default:
    }
    
    if item == 5 {
        return fmt.Errorf("error processing item %d", item)
    }
    
    time.Sleep(100 * time.Millisecond)
    fmt.Printf("Processed item %d\n", item)
    return nil
}

func main() {
    g, ctx := errgroup.WithContext(context.Background())
    
    items := []int{1, 2, 3, 4, 5, 6, 7, 8}
    
    for _, item := range items {
        item := item // Capture loop variable
        g.Go(func() error {
            return processItem(ctx, item)
        })
    }
    
    if err := g.Wait(); err != nil {
        fmt.Printf("Error occurred: %v\n", err)
    } else {
        fmt.Println("All items processed successfully")
    }
}
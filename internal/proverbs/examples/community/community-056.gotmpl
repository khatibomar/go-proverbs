// Use channels as first-class values
func merge(channels ...<-chan int) <-chan int {
    out := make(chan int)
    var wg sync.WaitGroup
    
    for _, ch := range channels {
        wg.Add(1)
        go func(c <-chan int) {
            defer wg.Done()
            for v := range c {
                out <- v
            }
        }(ch)
    }
    
    go func() {
        wg.Wait()
        close(out)
    }()
    
    return out
}

func generator(nums ...int) <-chan int {
    out := make(chan int)
    go func() {
        defer close(out)
        for _, n := range nums {
            out <- n
        }
    }()
    return out
}

func main() {
    // Create multiple channels
    ch1 := generator(1, 2, 3)
    ch2 := generator(4, 5, 6)
    ch3 := generator(7, 8, 9)
    
    // Merge them using channels as first-class values
    merged := merge(ch1, ch2, ch3)
    
    // Collect results
    var results []int
    for value := range merged {
        results = append(results, value)
    }
    
    fmt.Printf("Merged values: %v\n", results)
}
// Use context.WithValue sparingly and type-safely
type contextKey string

const (
    UserIDKey contextKey = "userID"
    RequestIDKey contextKey = "requestID"
)

// Type-safe context helpers
func WithUserID(ctx context.Context, userID string) context.Context {
    return context.WithValue(ctx, UserIDKey, userID)
}

func WithRequestID(ctx context.Context, requestID string) context.Context {
    return context.WithValue(ctx, RequestIDKey, requestID)
}

func GetUserID(ctx context.Context) (string, bool) {
    userID, ok := ctx.Value(UserIDKey).(string)
    return userID, ok
}

func GetRequestID(ctx context.Context) (string, bool) {
    requestID, ok := ctx.Value(RequestIDKey).(string)
    return requestID, ok
}

// Business logic using context values
func processRequest(ctx context.Context, data string) {
    userID, hasUser := GetUserID(ctx)
    requestID, hasRequest := GetRequestID(ctx)
    
    prefix := ""
    if hasRequest {
        prefix += fmt.Sprintf("[%s] ", requestID)
    }
    if hasUser {
        prefix += fmt.Sprintf("[%s] ", userID)
    }
    
    fmt.Printf("%sProcessing: %s\n", prefix, data)
}

func main() {
    ctx := context.Background()
    
    // Add context values
    ctx = WithRequestID(ctx, "req-123")
    ctx = WithUserID(ctx, "user-456")
    
    // Use context
    processRequest(ctx, "important data")
    
    // Demonstrate missing values
    emptyCtx := context.Background()
    fmt.Println("\nWith empty context:")
    processRequest(emptyCtx, "other data")
}
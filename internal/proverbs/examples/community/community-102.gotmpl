// Block profiling for contention analysis

// Contended resource example
type ContentedCounter struct {
    mu    sync.Mutex
    value int64
}

func (c *ContentedCounter) Increment() {
    c.mu.Lock()
    defer c.mu.Unlock()
    
    // Simulate some work while holding lock
    time.Sleep(time.Microsecond * 10)
    c.value++
}

func (c *ContentedCounter) Get() int64 {
    c.mu.Lock()
    defer c.mu.Unlock()
    return c.value
}

// Better: Lock-free counter using atomic operations
type AtomicCounter struct {
    value int64
}

func (c *AtomicCounter) Increment() {
    atomic.AddInt64(&c.value, 1)
}

func (c *AtomicCounter) Get() int64 {
    return atomic.LoadInt64(&c.value)
}

// Channel contention example
func channelContention() {
    ch := make(chan int, 1) // Small buffer causes contention
    
    var wg sync.WaitGroup
    
    // Multiple producers
    for i := 0; i < 10; i++ {
        wg.Add(1)
        go func(id int) {
            defer wg.Done()
            for j := 0; j < 100; j++ {
                ch <- id*100 + j // Blocks when buffer full
            }
        }(i)
    }
    
    // Single slow consumer
    wg.Add(1)
    go func() {
        defer wg.Done()
        for i := 0; i < 1000; i++ {
            <-ch
            time.Sleep(time.Microsecond) // Slow processing
        }
    }()
    
    wg.Wait()
}

// Improved: Larger buffer or multiple consumers
func improvedChannelUsage() {
    ch := make(chan int, 100) // Larger buffer
    
    var wg sync.WaitGroup
    
    // Producers
    for i := 0; i < 10; i++ {
        wg.Add(1)
        go func(id int) {
            defer wg.Done()
            for j := 0; j < 100; j++ {
                ch <- id*100 + j
            }
        }(i)
    }
    
    // Multiple consumers
    for i := 0; i < 3; i++ {
        wg.Add(1)
        go func() {
            defer wg.Done()
            for {
                select {
                case v, ok := <-ch:
                    if !ok {
                        return
                    }
                    _ = v // Process value
                case <-time.After(time.Millisecond):
                    return // Timeout
                }
            }
        }()
    }
    
    // Close channel after all producers finish
    go func() {
        wg.Wait()
        close(ch)
    }()
}

// RWMutex contention analysis
type DataStore struct {
    mu   sync.RWMutex
    data map[string]string
}

func NewDataStore() *DataStore {
    return &DataStore{
        data: make(map[string]string),
    }
}

func (ds *DataStore) Read(key string) (string, bool) {
    ds.mu.RLock()
    defer ds.mu.RUnlock()
    
    value, exists := ds.data[key]
    return value, exists
}

func (ds *DataStore) Write(key, value string) {
    ds.mu.Lock()
    defer ds.mu.Unlock()
    
    ds.data[key] = value
}

// Enable block profiling
func enableBlockProfiling() {
    // Set block profile rate
    runtime.SetBlockProfileRate(1)
    
    // Run contended code
    counter := &ContentedCounter{}
    
    var wg sync.WaitGroup
    for i := 0; i < 100; i++ {
        wg.Add(1)
        go func() {
            defer wg.Done()
            for j := 0; j < 1000; j++ {
                counter.Increment()
            }
        }()
    }
    wg.Wait()
    
    // Write block profile
    f, err := os.Create("block.prof")
    if err != nil {
        log.Fatal(err)
    }
    defer f.Close()
    
    pprof.Lookup("block").WriteTo(f, 0)
}

// Usage:
// go run -blockprofile=block.prof main.go
// go tool pprof block.prof
// (pprof) top10
// (pprof) list functionName